(use IO)
(use Maybe)

(Project.config "title" "doomenstein-carp")

(deftype Vec2 [x Float, y Float])

(defn vec2 [x y] (Vec2.init x y))
(defn vec2-x [v] (copy (Vec2.x v)))
(defn vec2-y [v] (copy (Vec2.y v)))

(defn add [a Vec2, b Vec2]
  (vec2 (+ (vec2-x a) (vec2-x b))
        (+ (vec2-y a) (vec2-y b))))

(defn sub [a Vec2, b Vec2]
  (vec2 (- (vec2-x a) (vec2-x b))
        (- (vec2-y a) (vec2-y b))))

(defn mul [a Vec2, t Float]
  (vec2 (* (vec2-x a) t)
        (* (vec2-y a) t)))

(defn cross [a Vec2, b Vec2]
  (- (* (vec2-x a) (vec2-y b))
     (* (vec2-x b) (vec2-y a))))

(defn intersection [p1 Vec2, p2 Vec2, q1 Vec2, q2 Vec2]
  (let [r (sub p2 p1)
        s (sub q2 q1)
        qp (sub q1 p1)
        t (/ (cross qp r) (cross s r))
        u (/ (cross qp s) (cross r s))]
    (if (and (>= t 0.0f) (<= t 1.0f) (>= u 0.0f) (<= u 1.0f))
      (Maybe.Just (add p1 (mul r t)))
      (Maybe.Nothing))))

(defn main []
  (do
    (println "Hello, world!")
    (println "Hello, world!")))